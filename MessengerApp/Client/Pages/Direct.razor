@page "/direct"
@inherits DirectBase
@attribute [Authorize]

<h2>Direct page</h2>

<div class="container-fluid">
    <div class="row">
        <div class="align-items-stretch flex-shrink-0 p-3 border-bottom text-decoration-none bg-dark bg-opacity-10 col-lg-2">
            <a class="d-flex align-items-center flex-shrink-0 p-3 link-light text-decoration-none border-bottom">
                <span class="fs-5 fw-normal text-black-50">
                    Your Chats
                </span>
            </a>
            <div class="list-group list-group-flush border-bottom overflow-auto" style="max-height:50em;">
                <a class="list-group-item list-group-item-info user-select-none" @onclick="CreateChat">
                    <div class="col-10 mb-1 small">
                        <span class="oi oi-plus" aria-hidden="true"></span>&ensp;Create Chat
                    </div>
                </a>
                @if (UserChats != null)
                {
                    @foreach (var item in UserChats)
                    {
                        <a class="list-group-item list-group-item-action @IsActive(item) py-3 lh-sm user-select-none" @onclick="()=>OpenChat(item.Id)">
                            <div class="col-10 mb-1 small">
                                @DisplayChatName(item)
                            </div>
                        </a>
                    }
                }
            </div>
        </div>

        <div class="card col-lg-10">
        
            @if (OpenedChat != null)
            {
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">@DisplayChatName(OpenedChat)</h5>

                    <div class="dropstart">
                        <a class="btn btn-sm" id="dropdownChatMenu" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="oi oi-menu"></span>
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="dropdownChatMenu">
                            <li>
                                <button type="button" class="btn dropdown-item" @onclick="() => RenameChatModal.Open()">
                                    <span class="oi oi-text" aria-hidden="true"></span> Rename Chat
                                </button>
                            </li>
                            <li>
                                <button type="button" class="btn dropdown-item" @onclick="() => ChatUsersModal.Open()">
                                    <span class="oi oi-people" aria-hidden="true"></span> Chat Users
                                </button>
                            </li>
                            <li>
                                <button type="button" class="btn dropdown-item" data-mdb-ripple-color="dark" @onclick="() => AddUserModal.Open()">
                                    <span class="oi oi-plus" aria-hidden="true"></span> Add User
                                </button>
                            </li>
                            <li class="dropdown-divider"></li>
                            <li>
                                <button type="button" class="btn dropdown-item" @onclick="LeaveFromChat">
                                    <span class="oi oi-account-logout" aria-hidden="true"></span> Leave chat
                                </button>
                            </li>
                        </ul>
                    </div>

                </div>

                <div class="card-body overflow-auto" data-mdb-perfect-scrollbar="true" style="position: relative; height: 400px" @ref="ChatAreaRef">

                    @foreach (var item in ChatMessages)
                    {
                        @if (IsUserMessageOwner(item))
                        {
                            <div class="d-flex flex-row justify-content-end mb-4 pt-1">
                                <div>
                                    <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">@item.Text</p>
                                    <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">@item.Time.ToString("hh:mm:ddd:yyyy")</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex flex-row justify-content-start">
                                <div>
                                    <p class="small rounded-3 text-muted d-flex justify-content-evenly">@DisplaySenderName(item)</p>
                                    <p class="small p-2 ms-3 mb-1 rounded-3" style="background-color: #f5f6f7;">@item.Text</p>
                                    <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-evenly">@item.Time.ToString("hh:mm:ddd:yyyy")</p>
                                </div>
                            </div>
                        }
                    }

                </div>

                <div class="card-footer text-muted d-flex justify-content-start align-items-center p-3">
                    <input type="text" class="form-control form-control-lg"
                       placeholder="Type message" @bind-value="MessageText" @bind-value:event="oninput" @onkeyup="HandleMessageInput">
                    <button class="btn btn-info btn-sm m-3" @onclick="SendMessage">Send</button>
                </div>
            }
            else
            {
                <div class="mb-4 divider d-flex align-items-center justify-content-center mt-auto mb-auto">
                    <p class="text-center mx-3 mb-0" style="color: #a2aab7;">No chats opened yet!</p>
                </div>
            }

        </div>
    </div>
</div>

@if (OpenedChat != null)
{
    <AddUserModal @ref="AddUserModal" ChatId="OpenedChat?.Id" HubConnection="HubConnection"></AddUserModal>
    <ChatUsersModal @ref="ChatUsersModal" ChatId="OpenedChat?.Id"></ChatUsersModal>
    <RenameChatModal @ref="RenameChatModal" HubConnection="HubConnection" ChatToRename="new ChatDTO{Id = OpenedChat.Id, Name = OpenedChat.Name}"></RenameChatModal>
}

@code {
    private AddUserModal AddUserModal { get; set; }
    private ChatUsersModal ChatUsersModal { get; set; }
    private RenameChatModal RenameChatModal { get; set; }

    public string IsActive(ChatDTO chat)
    {
        return chat.Id == OpenedChat?.Id ? "active" : "";
    }

    public bool IsUserMessageOwner(MessageDTO message)
    {
        return message.SenderId == UserId;
    }
    private async Task HandleMessageInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await SendMessage();
        }
    }

    private string DisplaySenderName(MessageDTO message)
    {
        string senderEmail = message.SenderName;
        string name = senderEmail.Split('@', StringSplitOptions.RemoveEmptyEntries)[0];
        return name;
    }

    private string DisplayChatName(ChatDTO chat)
    {
        if (chat.Name != string.Empty && chat.Name != null)
        {
            return $"{chat.Name}";
        }
        else
        {
            return $"ChatID: {chat.Id}";
        }
    }
}